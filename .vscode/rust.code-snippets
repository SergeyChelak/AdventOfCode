{
	"AoC Day Solution": {
		"prefix": "qqnewday",
		"description": "Creates template struct with representation for the day's AoC solution",
		"body": [
			"use crate::solution::Solution;",
			"use crate::utils::*;",
			"",
			"use std::io;",
			"",
			"pub struct AoC$1_$2 {",
			"\t// place required fields here",
			"}",
			"",
			"impl AoC$1_$2 {",
			"\tpub fn new() -> io::Result<Self> {",
			"\t\tlet _ = \"input/aoc$1_$2\";",
			"\t\tOk(Self {",
			"\t\t\t// initialize solution",
			"\t\t})",
			"\t}",
			"}",
			"",
			"impl Solution for AoC$1_$2 {",
			"\t// fn part_one(&self) -> String {",
			"\t// }",
			"",
			"\t// fn part_two(&self) -> String {",
			"\t// }",
			"",
			"\tfn description(&self) -> String {",
			"\t\t\"\".to_string()",
			"\t}",
			"}",
			"",
			"#[cfg(test)]",
			"mod test {",
			"\tuse super::*;",
			"",
			"\t#[test]",
			"\tfn aoc$1_$2_input_load_test() -> io::Result<()> {",
			"\t\tlet sol = make_solution()?;",
			"\t\tOk(())",
			"\t}",
			"",
			"\t#[test]",
			"\tfn aoc$1_$2_correctness_part_1() -> io::Result<()> {",
			"\t\tlet sol = make_solution()?;",
			"\t\tassert_eq!(sol.part_one(), \"\");",
			"\t\tOk(())",
			"\t}",
			"",
			"\t#[test]",
			"\tfn aoc$1_$2_correctness_part_2() -> io::Result<()> {",
			"\t\tlet sol = make_solution()?;",
			"\t\tassert_eq!(sol.part_two(), \"\");",
			"\t\tOk(())",
			"\t}",
			"",
			"\tfn make_solution() -> io::Result<AoC$1_$2> {",
			"\t\tAoC$1_$2::new()",
			"\t}",
			"}",
		]
	}
}