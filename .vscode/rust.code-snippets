{
	"AoC Day Solution": {
		"prefix": "qqnewday",
		"description": "Creates template struct with representation for the day's AoC solution",
		"body": [
			"use crate::solution::Solution;",
			"use crate::utils::*;",
			"",
			"use std::io;",
			"",
			"pub struct AoC$1_$2 {",
			"\t// place required fields here",
			"}",
			"",
			"impl AoC$1_$2 {",
			"\tpub fn new() -> io::Result<Self> {",
			"\t\tlet _ = \"input/aoc$1_$2\";",
			"\t\tOk(Self {",
			"\t\t\t// initialize solution",
			"\t\t})",
			"\t}",
			"}",
			"",
			"impl Solution for AoC$1_$2 {",
			"\t// fn part_one(&self) -> String {",
			"\t// }",
			"",
			"\t// fn part_two(&self) -> String {",
			"\t// }",
			"",
			"\tfn description(&self) -> String {",
			"\t\t\"\".to_string()",
			"\t}",
			"}",
			"",
			"#[cfg(test)]",
			"mod test {",
			"\tuse super::*;",
			"",
			"\t#[test]",
			"\tfn aoc$1_$2_input_load_test() -> io::Result<()> {",
			"\t\tlet sol = make_solution()?;",
			"\t\tOk(())",
			"\t}",
			"",
			"\t#[test]",
			"\tfn aoc$1_$2_correctness_part_1() -> io::Result<()> {",
			"\t\tlet sol = make_solution()?;",
			"\t\tassert_eq!(sol.part_one(), \"\");",
			"\t\tOk(())",
			"\t}",
			"",
			"\t#[test]",
			"\tfn aoc$1_$2_correctness_part_2() -> io::Result<()> {",
			"\t\tlet sol = make_solution()?;",
			"\t\tassert_eq!(sol.part_two(), \"\");",
			"\t\tOk(())",
			"\t}",
			"",
			"\tfn make_solution() -> io::Result<AoC$1_$2> {",
			"\t\tAoC$1_$2::new()",
			"\t}",
			"}",
		]
	},
	"AoC Module": {
		"prefix": "qqmodule",
		"body": [
			"use super::solution::{PuzzleFactory, PuzzleFactoryMethod};",
			"",
			"// mod day_01;",
			"// use day_01::*;",
			"",
			"// mod day_02;",
			"// use day_02::*;",
			"",
			"// mod day_03;",
			"// use day_03::*;",
			"",
			"// mod day_04;",
			"// use day_04::*;",
			"",
			"// mod day_05;",
			"// use day_05::*;",
			"",
			"// mod day_06;",
			"// use day_06::*;",
			"",
			"// mod day_07;",
			"// use day_07::*;",
			"",
			"// mod day_08;",
			"// use day_08::*;",
			"",
			"// mod day_09;",
			"// use day_09::*;",
			"",
			"// mod day_10;",
			"// use day_10::*;",
			"",
			"// mod day_11;",
			"// use day_11::*;",
			"",
			"// mod day_12;",
			"// use day_12::*;",
			"",
			"// mod day_13;",
			"// use day_13::*;",
			"",
			"// mod day_14;",
			"// use day_14::*;",
			"",
			"// mod day_15;",
			"// use day_15::*;",
			"",
			"// mod day_16;",
			"// use day_16::*;",
			"",
			"// mod day_17;",
			"// use day_17::*;",
			"",
			"// mod day_18;",
			"// use day_18::*;",
			"",
			"// mod day_19;",
			"// use day_19::*;",
			"",
			"// mod day_20;",
			"// use day_20::*;",
			"",
			"// mod day_21;",
			"// use day_21::*;",
			"",
			"// mod day_22;",
			"// use day_22::*;",
			"",
			"// mod day_23;",
			"// use day_23::*;",
			"",
			"// mod day_24;",
			"// use day_24::*;",
			"",
			"// mod day_25;",
			"// use day_25::*;",
			"",
			"pub fn puzzle_factory_$1() -> PuzzleFactory {",
			"    let producers: Vec<&'static PuzzleFactoryMethod> = vec![",
			"        // &|| Ok(Box::new(AoC$1_01::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_02::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_03::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_04::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_05::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_06::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_07::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_08::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_09::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_10::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_11::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_12::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_13::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_14::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_15::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_16::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_17::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_18::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_19::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_20::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_21::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_22::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_23::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_24::new()?)),",
			"        // &|| Ok(Box::new(AoC$1_25::new()?)),",
			"    ];",
			"    PuzzleFactory::new($1, producers)",
			"}",
		]
	}
}